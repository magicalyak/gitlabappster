image: docker:19.03.1

variables:
  # When using dind service, we need to instruct docker, to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. docker:19.03.1 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03.1/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  #
  # Note that if you're using the Kubernetes executor, the variable
  # should be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  #CONTAINER_CROSSPLANE: registry.gitlab.f5demolab.com/$GITLAB_USER_LOGIN/nginx-plus-dockerfiles:ubuntu18.04_crossplane
  REGISTRY_URL: registry.gitlab.f5demolab.com
  CROSSPLANE_IMAGE: $REGISTRY_URL/f5-demo-lab/nginx-plus-dockerfiles:ubuntu18.04_crossplane
  NAME_CONTAINER_NGINX: nginx-plus-appster-demo # container name
  NAME_CONTAINER_CROSSPLANE: nginx-plus-crossplane-appster-demo
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  
services:
  - name:  docker:19.03.1-dind
    alias: docker
    entrypoint: ["/bin/sh","-c" ,'echo "10.1.1.5 registry.gitlab.f5demolab.com gitlab.f5demolab.com">>/etc/hosts && dockerd-entrypoint.sh']

before_script:
  - docker info
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY 

# Run sequentially
stages:
  - build
  - test
  - push
  - clean_up

build_nginx_container: # CI_JOB_NAME
  stage: build
  variables:
    TAG: $CI_JOB_NAME  
  script:
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    #- docker build --pull -t $NAME_CONTAINER_NGINX .
    #- docker push $NAME_CONTAINER_NGINX
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

build_crossplane_container: # CI_JOB_NAME
  stage: build
  script:
    - docker pull $CROSSPLANE_IMAGE
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    #- docker build --pull -t $CROSSPLANE_IMAGE .

test_nginx_conf: # CI_JOB_NAME
  stage: test
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    #- docker run --rm -t -a stdout --name $CONTAINER_TEST_IMAGE --sysctl net.ipv4.ip_nonlocal_bind=1 -v "$(pwd)/etc/nginx/:/etc/nginx/" $CONTAINER_TEST_IMAGE nginx -t
    - docker run $CONTAINER_TEST_IMAGE nginx -t
    
test_crossplane_nginx_conf: # CI_JOB_NAME
  stage: test
  script:
    - apk add jq
    - docker run --rm -t -a stdout --name $NAME_CONTAINER_CROSSPLANE --sysctl net.ipv4.ip_nonlocal_bind=1 -v "$(pwd)/etc/nginx/:/etc/nginx/" $CROSSPLANE_IMAGE crossplane parse /etc/nginx/nginx.conf | jq '.status, .errors[]'

push: # CI_JOB_NAME
  stage: push
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    #- docker tag $NAME_CONTAINER_NGINX ${CI_REGISTRY}/${CI_PROJECT_PATH}:$CI_COMMIT_SHORT_SHA
    #- docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$CI_COMMIT_SHORT_SHA
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE

clean_up:
  stage: clean_up
  script:
    - docker system prune -f
    - docker images
  when: always # Run regardless of job failures
